{
  "version": "1.0.0",
  "generated_at": "2025-07-27T08:00:00Z",
  "source_version": "abc123def456",
  "schema_version": "http://json-schema.org/draft-07/schema#",
  "metadata": {
    "description": "Louie.ai element types for API responses",
    "source_repo": "graphistrygpt",
    "export_script": "scripts/export_element_types.py"
  },
  "element_union": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "discriminator": {
      "propertyName": "type"
    },
    "oneOf": [
      {"$ref": "#/definitions/TextElement"},
      {"$ref": "#/definitions/DfElement"},
      {"$ref": "#/definitions/GraphElement"},
      {"$ref": "#/definitions/ExceptionElement"}
    ]
  },
  "element_types": {
    "TextElement": {
      "schema": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "const": "TextElement"
          },
          "text": {
            "type": "string",
            "description": "The text content"
          },
          "language": {
            "type": "string",
            "enum": ["Markdown", "Python", "JSON", "SQL", "PlainText"],
            "default": "Markdown",
            "description": "Language or format of the text"
          }
        },
        "required": ["type", "text"]
      },
      "description": "Natural language, code, or structured text responses",
      "examples": [
        {
          "name": "Analysis summary",
          "value": {
            "type": "TextElement",
            "text": "## Key Findings\n\n1. Sales increased 15% YoY\n2. Customer retention improved\n3. New markets show promise",
            "language": "Markdown"
          }
        },
        {
          "name": "JSON data",
          "value": {
            "type": "TextElement",
            "text": "{\"status\": \"success\", \"count\": 42}",
            "language": "JSON"
          }
        }
      ],
      "common_queries": [
        "Summarize the key findings",
        "Explain the correlation between X and Y",
        "Generate an executive report",
        "What patterns do you see in the data?"
      ]
    },
    "DfElement": {
      "schema": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "const": "DfElement"
          },
          "version": {
            "type": "integer",
            "default": 0,
            "description": "Version for streaming/updates"
          },
          "metadata": {
            "type": "object",
            "description": "Frontend metadata about the DataFrame"
          }
        },
        "required": ["type"]
      },
      "description": "DataFrame responses from database queries or data processing",
      "examples": [
        {
          "name": "Query result",
          "value": {
            "type": "DfElement",
            "version": 0,
            "metadata": {
              "shape": [100, 5],
              "columns": ["id", "name", "value", "created_at", "status"]
            }
          }
        }
      ],
      "common_queries": [
        "Query PostgreSQL for customer data",
        "Get sales metrics from ClickHouse", 
        "Search Splunk logs for errors",
        "Load data from the CSV file"
      ]
    },
    "GraphElement": {
      "schema": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "const": "GraphElement"
          },
          "dataset_id": {
            "type": "string",
            "description": "Graphistry dataset ID for visualization"
          },
          "status": {
            "type": "string",
            "description": "Upload status"
          },
          "params": {
            "type": "object",
            "description": "Visualization parameters"
          }
        },
        "required": ["type", "dataset_id"]
      },
      "description": "Graphistry network visualization responses",
      "examples": [
        {
          "name": "Network visualization",
          "value": {
            "type": "GraphElement",
            "dataset_id": "abc123def456",
            "status": "completed",
            "params": {
              "node_color": "risk_score",
              "edge_weight": "transaction_amount"
            }
          }
        }
      ],
      "common_queries": [
        "Visualize user connections in Graphistry",
        "Create a network graph of system dependencies",
        "Show fraud patterns as a graph",
        "Map relationships between entities"
      ]
    },
    "ExceptionElement": {
      "schema": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "const": "ExceptionElement"
          },
          "text": {
            "type": "string",
            "description": "Error message"
          },
          "traceback": {
            "type": "string",
            "description": "Optional stack trace"
          }
        },
        "required": ["type", "text"]
      },
      "description": "Error responses when queries fail",
      "examples": [
        {
          "name": "Database error",
          "value": {
            "type": "ExceptionElement",
            "text": "Table 'users' not found",
            "traceback": "psycopg2.ProgrammingError: relation \"users\" does not exist\n  at execute_query..."
          }
        }
      ],
      "common_queries": [
        "Query non_existent_table",
        "Invalid SQL syntax",
        "Connection timeout"
      ]
    }
  },
  "response_patterns": {
    "single_element": {
      "description": "Most queries return a single element",
      "example": {
        "query": "Query PostgreSQL for user count",
        "response_type": "DfElement"
      }
    },
    "multi_element": {
      "description": "Complex queries can return multiple elements in sequence",
      "example": {
        "query": "Query sales data, create UMAP visualization, and summarize insights",
        "response_types": ["DfElement", "GraphElement", "TextElement"]
      }
    },
    "error_handling": {
      "description": "Errors return ExceptionElement",
      "example": {
        "query": "Query invalid_table",
        "response_type": "ExceptionElement"
      }
    }
  }
}